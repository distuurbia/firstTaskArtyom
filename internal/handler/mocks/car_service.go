// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/distuurbia/firstTaskArtyom/internal/model"

	uuid "github.com/google/uuid"
)

// CarService is an autogenerated mock type for the CarService type
type CarService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, car
func (_m *CarService) Create(ctx context.Context, car *model.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CarService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *CarService) Get(ctx context.Context, id uuid.UUID) (*model.Car, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Car, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Car); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *CarService) GetAll(ctx context.Context) ([]*model.Car, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Car, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Car); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, car
func (_m *CarService) Update(ctx context.Context, car *model.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCarService creates a new instance of CarService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCarService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CarService {
	mock := &CarService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
